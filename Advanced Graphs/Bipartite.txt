#include <bits/stdc++.h>
using namespace std;


bool bipartite_helper(vector<int>* edges, int v, int *color, int src){
    
    queue<int> q;
    q.push(src);
    color[src] = 1;
    while(!q.empty()){
        int front = q.front();
        q.pop();
        for(auto i: edges[front]){
            if(color[i] == -1){
                color[i] = 1 - color[front];
                q.push(i);
            }
            else if(color[i] == color[front])
              return false;
        }
    }
    return true;
}

bool bipartite(vector<int>* edges, int v){
    int *color = new int[v];
    for(int i=0; i<v; i++){
        color[i] = -1;
    }
    
    for(int i=0; i<v; i++){
        if(color[i] == -1){
            if(!bipartite_helper(edges, v, color, i))
                 return false;
        }
    }
    //free space
    delete[] color;
    
    return true;
}

int main() {
    int t;
    cin >> t;
    while(t--){
        int v, e;
        cin >> v >> e;
        if(v == 0)
           break;
           
        vector<int>* edges = new vector<int>[v];
        while(e--){
            int s, d;
            cin >> s >> d;
            edges[s].push_back(d);
            edges[d].push_back(s);
        }
        bool ans = bipartite(edges, v);
        cout << (ans ? "Yes" : "No") << endl;
        
        //free space
        delete[] edges;
    }
    return 0;
}