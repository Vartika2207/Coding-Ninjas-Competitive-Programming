/*******************

Floyd-Warshall Algorithm

You are given an undirected weighted graph G with n vertices. And Q queries, each query consists of two integers a and b and you have print the distance of shortest path between a and b.
Note: If there is no path between a and b print 10^9
Input Format:
First line of Input will contain T(number of test cases), each test case follows as.
Line1: contains two space-separated integers N and M denoting the number of vertex and edge in graph.
Next M line contain three space-separated integers a, b, c denoting the edge between a and b with weight c.
Next line will contain Q (number of queries)
Next Q lines will contain two space-separated integers a and b.
Output Format:
For each query of each test case print the answer in a newline.
Constraints:
1 <= T <= 50
1 <= N <= 100
1 <= M <= 10^4
1 <= Q <= 10^4
1 <= wt <= 10^5 (for each edge)
Note: Graph may contain multiple edges.
Sample Input:
1
3 6
3 1 4
1 3 17
2 3 2
1 3 7
3 2 11
2 3 15
3
1 1 
2 2 
2 3 
Sample output:
0
0
2

*******************/


#include<bits/stdc++.h>
using namespace std;

//time: O(v^3)
void floyd_warshallAlgorithm(int **adjMat, int v, int **distance){
    for(int k=1; k<=v; k++){
        for(int i=1; i<=v; i++){
            for(int j=1; j<=v; j++){
                if(distance[k][j] == INT_MAX || distance[i][k] == INT_MAX)
                    continue;
                if(distance[i][j] > distance[i][k] + distance[k][j]){
                    distance[i][j] =  distance[i][k] + distance[k][j];
                }
            }
        }
    }
}

int main(){
    
    int t;
    cin >> t;
    while(t--){
        int v, e;
        cin >> v >> e;
        
        
        int **adjMat = new int*[v+1];
        for(int i=0; i<=v; i++){
            adjMat[i] = new int[v+1];
            for(int j=0; j<=v; j++){
            adjMat[i][j] = INT_MAX;
           }
        }
        
        for(int i=0; i<e; i++){
            int s, d, w;
            cin >> s >> d >> w;
            if(adjMat[s][d] == INT_MAX || adjMat[s][d] > w)
                adjMat[s][d] = w;
            if(adjMat[d][s] == INT_MAX || adjMat[d][s] > w)
                adjMat[d][s] = w;
        }
        
        //distance matrix
        int **distance = new int*[v+1];
        for(int i=0; i<=v; i++){
            distance[i] = new int[v+1];
        }

        for(int i=1; i<=v; i++){
            for(int j=1; j<=v; j++){
                distance[i][j] = adjMat[i][j];
            }
        }
        
        floyd_warshallAlgorithm(adjMat, v, distance);
        int q;
        cin >> q;
        while(q--){
            int s, d;
            cin >> s >> d;
            if(s == d)
                cout << 0 << endl;
            else
               cout << (distance[s][d] == INT_MAX ? 1e9 : distance[s][d]) << endl;
        }
        
    }
    return 0;
}
